________________________________________________________________________

This file is part of Logtalk <https://logtalk.org/>  
Copyright 1998-2021 Paulo Moura <pmoura@logtalk.org>  
SPDX-License-Identifier: Apache-2.0

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
________________________________________________________________________


% load the SWI-Prolog statistics library that provide the time/1
% predicate that we would use for quick benchmarking:

| ?- use_module(library(statistics)).
...


% load the example:

| ?- logtalk_load(ebench(loader)).
...


% first, an example with an engine goal that succeeds deterministically:

| ?- time((between(1,2000,I),atom_number(A,I),threaded_engine_create(_,true,A),fail)).
...

| ?- time((between(1,2000,I),atom_number(A,I),threaded_engine_destroy(A),fail)).
...


% second, an example with an engine goal that provides an infinite stream of solutions:

| ?- time((between(1,2000,I),atom_number(A,I),threaded_engine_create(_,repeat,A),fail)).
...

| ?- time((between(1,2000,I),atom_number(A,I),threaded_engine_destroy(A),fail)).
...


% finally, an example with an engine running a loop predicate using the engine term queue:

| ?- [user].
loop :- threaded_engine_fetch(_),loop.
end_of_file.
yes

| ?- time((between(1,2000,I),atom_number(A,I),threaded_engine_create(_,loop,A),fail)).
...

| ?- time((between(1,2000,I),atom_number(A,I),threaded_engine_destroy(A),fail)).
...
