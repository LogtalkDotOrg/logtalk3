.. index:: single: monitorp
.. _monitorp/0:

.. rst-class:: right

**protocol**

``monitorp``
============

Monitor protocol.

| **Availability:** 
|    ``logtalk_load(events(loader))``

| **Author:** Paulo Moura
| **Version:** 1:0:0
| **Date:** 2000-07-24

| **Compilation flags:**
|    ``static``


| **Dependencies:**
|   (none)


| **Remarks:**
|    (none)

| **Inherited public predicates:**
|    (none)

.. contents::
   :local:
   :backlinks: top

Public predicates
-----------------

.. index:: monitor_activated/0
.. _monitorp/0::monitor_activated/0:

``monitor_activated/0``
^^^^^^^^^^^^^^^^^^^^^^^

True if monitor is currently active.

| **Compilation flags:**
|    ``static``

| **Mode and number of proofs:**
|    ``monitor_activated`` - ``zero_or_one``


------------

.. index:: activate_monitor/0
.. _monitorp/0::activate_monitor/0:

``activate_monitor/0``
^^^^^^^^^^^^^^^^^^^^^^

Activates all spy points and start monitoring.

| **Compilation flags:**
|    ``static``

| **Mode and number of proofs:**
|    ``activate_monitor`` - ``one``


------------

.. index:: suspend_monitor/0
.. _monitorp/0::suspend_monitor/0:

``suspend_monitor/0``
^^^^^^^^^^^^^^^^^^^^^

Suspends monitoring, deactivating all spy points.

| **Compilation flags:**
|    ``static``

| **Mode and number of proofs:**
|    ``suspend_monitor`` - ``one``


------------

.. index:: reset_monitor/0
.. _monitorp/0::reset_monitor/0:

``reset_monitor/0``
^^^^^^^^^^^^^^^^^^^

Resets monitor, deactivating and deleting all spy points.

| **Compilation flags:**
|    ``static``

| **Mode and number of proofs:**
|    ``reset_monitor`` - ``one``


------------

.. index:: spy_point/4
.. _monitorp/0::spy_point/4:

``spy_point/4``
^^^^^^^^^^^^^^^

Current spy point.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``spy_point(Event,Object,Message,Sender)``
| **Mode and number of proofs:**
|    ``spy_point(?event,?object,?callable,?object)`` - ``zero_or_more``


------------

.. index:: set_spy_point/4
.. _monitorp/0::set_spy_point/4:

``set_spy_point/4``
^^^^^^^^^^^^^^^^^^^

Sets a spy point.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``set_spy_point(Event,Object,Message,Sender)``
| **Mode and number of proofs:**
|    ``set_spy_point(?event,?object,?callable,?object)`` - ``one``


------------

.. index:: del_spy_points/4
.. _monitorp/0::del_spy_points/4:

``del_spy_points/4``
^^^^^^^^^^^^^^^^^^^^

Deletes all matching spy points.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``del_spy_points(Event,Object,Message,Sender)``
| **Mode and number of proofs:**
|    ``del_spy_points(@event,@object,@callable,@object)`` - ``one``


------------

Protected predicates
--------------------

(none)

Private predicates
------------------

(none)

Operators
---------

(none)

.. seealso::

   :ref:`monitor <monitor/0>`, :ref:`event_registryp <event_registryp/0>`

