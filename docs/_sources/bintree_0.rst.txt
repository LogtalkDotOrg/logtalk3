.. index:: bintree
.. _bintree/0:

.. rst-class:: right

**object**

``bintree``
===========

Simple binary tree implementation of the dictionary protocol. Uses standard order to compare keys.

| **Author:** Paulo Moura and Paul Fodor
| **Version:** 2.9
| **Date:** 2019/5/17

| **Compilation flags:**
|    ``static, context_switching_calls``


| **Implements:**
|    ``public`` :ref:`dictionaryp <dictionaryp/0>`
| **Extends:**
|    ``public`` :ref:`compound <compound/0>`
| **Uses:**
|    :ref:`list <list/0>`

| **Remarks:**
|    (none)

.. contents::
   :local:
   :backlinks: top

Public interface
----------------

.. raw:: html

   <div id="preorder/2"> </div>

.. index:: preorder/2
.. _bintree/0::preorder/2:

``preorder/2``
^^^^^^^^^^^^^^

Preorder tree traversal.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``preorder(Tree,List)``
| **Mode and number of proofs:**
|    ``preorder(@tree,-list)`` - ``one``


.. raw:: html

   <div id="inorder/2"> </div>

.. index:: inorder/2
.. _bintree/0::inorder/2:

``inorder/2``
^^^^^^^^^^^^^

| **Compilation flags:**
|    ``static``

| **Mode and number of proofs:**
|    ``inorder(@tree,-list)`` - ``one``


.. raw:: html

   <div id="postorder/2"> </div>

.. index:: postorder/2
.. _bintree/0::postorder/2:

``postorder/2``
^^^^^^^^^^^^^^^

| **Compilation flags:**
|    ``static``

| **Mode and number of proofs:**
|    ``postorder(@tree,-list)`` - ``one``


Protected interface
-------------------

(see related entities)

Private predicates
------------------

(see related entities)

Operators
---------

(none)

.. seealso::

   :ref:`avltree <avltree/0>`, :ref:`rbtree <rbtree/0>`

