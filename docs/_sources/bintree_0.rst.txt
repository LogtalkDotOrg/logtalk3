.. index:: bintree
.. _bintree/0:

.. rst-class:: right

**object**

``bintree``
===========

Simple binary tree implementation of the dictionary protocol. Uses standard order to compare keys.

| **Author:** Paulo Moura and Paul Fodor
| **Version:** 2.9
| **Date:** 2019/5/17

| **Compilation flags:**
|    ``static, context_switching_calls``


| **Implements:**
|    ``public`` :ref:`dictionaryp <dictionaryp/0>`
| **Extends:**
|    ``public`` :ref:`compound <compound/0>`
| **Uses:**
|    :ref:`list <list/0>`

| **Remarks:**
|    (none)

.. contents::
   :local:
   :backlinks: top

.. raw:: html

   </div>

Inherited public predicates
---------------------------

:ref:`dictionaryp/0::apply/4`  :ref:`dictionaryp/0::as_dictionary/2`  :ref:`dictionaryp/0::as_list/2`  :ref:`termp/0::check/1`  :ref:`dictionaryp/0::clone/3`  :ref:`dictionaryp/0::clone/4`  :ref:`dictionaryp/0::delete/4`  :ref:`dictionaryp/0::delete_max/4`  :ref:`dictionaryp/0::delete_min/4`  :ref:`termp/0::depth/2`  :ref:`dictionaryp/0::empty/1`  :ref:`termp/0::ground/1`  :ref:`dictionaryp/0::insert/4`  :ref:`dictionaryp/0::keys/2`  :ref:`dictionaryp/0::lookup/3`  :ref:`dictionaryp/0::map/2`  :ref:`dictionaryp/0::map/3`  :ref:`dictionaryp/0::max/3`  :ref:`dictionaryp/0::min/3`  :ref:`termp/0::new/1`  :ref:`dictionaryp/0::next/4`  :ref:`termp/0::occurs/2`  :ref:`dictionaryp/0::previous/4`  :ref:`termp/0::singletons/2`  :ref:`dictionaryp/0::size/2`  :ref:`termp/0::subsumes/2`  :ref:`termp/0::subterm/2`  :ref:`dictionaryp/0::update/4`  :ref:`dictionaryp/0::update/5`  :ref:`termp/0::valid/1`  :ref:`dictionaryp/0::values/2`  :ref:`termp/0::variables/2`  :ref:`termp/0::variant/2`  

.. raw:: html

   </div>

Public predicates
-----------------

.. raw:: html

   <div id="inorder/2"> </div>

.. index:: inorder/2
.. _bintree/0::inorder/2:

``inorder/2``
^^^^^^^^^^^^^

| **Compilation flags:**
|    ``static``

| **Mode and number of proofs:**
|    ``inorder(@tree,-list)`` - ``one``


------------

.. raw:: html

   <div id="postorder/2"> </div>

.. index:: postorder/2
.. _bintree/0::postorder/2:

``postorder/2``
^^^^^^^^^^^^^^^

| **Compilation flags:**
|    ``static``

| **Mode and number of proofs:**
|    ``postorder(@tree,-list)`` - ``one``


------------

.. raw:: html

   <div id="preorder/2"> </div>

.. index:: preorder/2
.. _bintree/0::preorder/2:

``preorder/2``
^^^^^^^^^^^^^^

Preorder tree traversal.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``preorder(Tree,List)``
| **Mode and number of proofs:**
|    ``preorder(@tree,-list)`` - ``one``


------------

Protected predicates
--------------------

(see entity ancestors)

Private predicates
------------------

(see entity ancestors)

Operators
---------

(none)

.. seealso::

   :ref:`avltree <avltree/0>`, :ref:`rbtree <rbtree/0>`

