.. index:: backend_random
.. _backend_random/0:

.. rst-class:: right

**object**

``backend_random``
==================

Random number generator predicates using the backend Prolog compiler built-in random generator.

| **Author:** Paulo Moura
| **Version:** 1.5
| **Date:** 2019/3/7

| **Compilation flags:**
|    ``static, context_switching_calls``


| **Implements:**
|    ``public`` :ref:`randomp <randomp/0>`
| **Uses:**
|    :ref:`list <list/0>`

| **Remarks:**


   - *Implementation:* The backend Prolog compiler built-in random generator is only used for the basic ``random/1``, ``get_seed/1``, and ``set_seed/1`` predicates.

   - *Portability:* B-Prolog, CxProlog, ECLiPSe, JIProlog, Lean Prolog, Qu-Prolog, Quintus Prolog do not provide implementations for the ``get_seed/1`` and ``set_seed/1`` predicates and calling these predicates simply succeed without performing any action.

.. contents::
   :local:
   :backlinks: top

.. raw:: html

   </div>

Inherited public predicates
---------------------------

:ref:`randomp/0::between/3`  :ref:`randomp/0::get_seed/1`  :ref:`randomp/0::maybe/0`  :ref:`randomp/0::maybe/1`  :ref:`randomp/0::maybe/2`  :ref:`randomp/0::maybe_call/1`  :ref:`randomp/0::maybe_call/2`  :ref:`randomp/0::member/2`  :ref:`randomp/0::permutation/2`  :ref:`randomp/0::random/1`  :ref:`randomp/0::random/3`  :ref:`randomp/0::randseq/4`  :ref:`randomp/0::randset/4`  :ref:`randomp/0::select/3`  :ref:`randomp/0::sequence/4`  :ref:`randomp/0::set/4`  :ref:`randomp/0::set_seed/1`  

.. raw:: html

   </div>

Public predicates
-----------------

(see entity ancestors)

Protected predicates
--------------------

(see entity ancestors)

Private predicates
------------------

(see entity ancestors)

Operators
---------

(none)

.. seealso::

   :ref:`random <random/0>`, :ref:`fast_random <fast_random/0>`

