.. index:: random_protocol
.. _random_protocol/0:

.. rst-class:: right

**protocol**

``random_protocol``
===================

Random number generator protocol. The predicates are declared as synchronized when the library is compiled using a backend supporting threads.

| **Availability:** 
|    ``logtalk_load(random(loader))``

| **Author:** Paulo Moura
| **Version:** 3:4:0
| **Date:** 2025-02-24

| **Compilation flags:**
|    ``static``


| **Dependencies:**
|   (none)


| **Remarks:**
|    (none)

| **Inherited public predicates:**
|    (none)

.. contents::
   :local:
   :backlinks: top

Public predicates
-----------------

.. index:: random/1
.. _random_protocol/0::random/1:

``random/1``
^^^^^^^^^^^^

Returns a new random float value in the interval ``[0.0, 1.0[``.

| **Compilation flags:**
|    ``static, synchronized``

| **Template:**
|    ``random(Random)``
| **Mode and number of proofs:**
|    ``random(-float)`` - ``one``


------------

.. index:: between/3
.. _random_protocol/0::between/3:

``between/3``
^^^^^^^^^^^^^

Returns a new random integer in the interval ``[Lower, Upper]``. Fails if ``Lower`` or ``Upper`` are not integers or if ``Lower > Upper``.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``between(Lower,Upper,Random)``
| **Mode and number of proofs:**
|    ``between(+integer,+integer,-integer)`` - ``zero_or_one``


------------

.. index:: member/2
.. _random_protocol/0::member/2:

``member/2``
^^^^^^^^^^^^

Returns a random member of a list. Fails if the list is empty.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``member(Random,List)``
| **Mode and number of proofs:**
|    ``member(-term,+list(term))`` - ``zero_or_one``


------------

.. index:: select/3
.. _random_protocol/0::select/3:

``select/3``
^^^^^^^^^^^^

Returns a random member of a list and the rest of the list. Fails if the list is empty.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``select(Random,List,Rest)``
| **Mode and number of proofs:**
|    ``select(-term,+list(term),-list(term))`` - ``zero_or_one``


------------

.. index:: select/4
.. _random_protocol/0::select/4:

``select/4``
^^^^^^^^^^^^

Returns a random member of a list, replacing it with a new element and returning the resulting list.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``select(Random,OldList,New,NewList)``
| **Mode and number of proofs:**
|    ``select(-term,+list(term),@term,-list(term))`` - ``zero_or_one``


------------

.. index:: swap/2
.. _random_protocol/0::swap/2:

``swap/2``
^^^^^^^^^^

Swaps two randomly selected elements of a list. Fails if the list is empty or contains a single element.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``swap(OldList,NewList)``
| **Mode and number of proofs:**
|    ``swap(-term,+list(term))`` - ``zero_or_one``


------------

.. index:: swap_consecutive/2
.. _random_protocol/0::swap_consecutive/2:

``swap_consecutive/2``
^^^^^^^^^^^^^^^^^^^^^^

Swaps two randomly selected consecutive elements of a list. Fails if the list is empty or contains a single element.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``swap_consecutive(OldList,NewList)``
| **Mode and number of proofs:**
|    ``swap_consecutive(-term,+list(term))`` - ``zero_or_one``


------------

.. index:: enumerate/2
.. _random_protocol/0::enumerate/2:

``enumerate/2``
^^^^^^^^^^^^^^^

Enumerates the elements of a list in random order. Fails if the list is empty.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``enumerate(List,Random)``
| **Mode and number of proofs:**
|    ``enumerate(+list(term),--term)`` - ``zero_or_more``


------------

.. index:: permutation/2
.. _random_protocol/0::permutation/2:

``permutation/2``
^^^^^^^^^^^^^^^^^

Returns a random permutation of a list.

| **Compilation flags:**
|    ``static, synchronized``

| **Template:**
|    ``permutation(List,Permutation)``
| **Mode and number of proofs:**
|    ``permutation(+list,-list)`` - ``one``


------------

.. index:: sequence/4
.. _random_protocol/0::sequence/4:

``sequence/4``
^^^^^^^^^^^^^^

Returns list of random integers of given length in random order in interval ``[Lower, Upper]``. Fails if ``Length``, ``Lower``, or ``Upper`` are not integers or if ``Lower > Upper``.

| **Compilation flags:**
|    ``static, synchronized``

| **Template:**
|    ``sequence(Length,Lower,Upper,List)``
| **Mode and number of proofs:**
|    ``sequence(+integer,+integer,+integer,-list(integer))`` - ``zero_or_one``


------------

.. index:: set/4
.. _random_protocol/0::set/4:

``set/4``
^^^^^^^^^

Returns ordered set of random integers of given size in interval ``[Lower, Upper]``. Fails if ``Length``, ``Lower``, or ``Upper`` are not integers, if ``Lower > Upper``, or if ``Length > Upper - Lower + 1``.

| **Compilation flags:**
|    ``static, synchronized``

| **Template:**
|    ``set(Length,Lower,Upper,Set)``
| **Mode and number of proofs:**
|    ``set(+integer,+integer,+integer,-list(integer))`` - ``zero_or_one``


------------

.. index:: random/3
.. _random_protocol/0::random/3:

``random/3``
^^^^^^^^^^^^

Returns a new random value in the interval ``[Lower, Upper[``. Fails if ``Lower > Upper``. Deprecated. Use ``between/3`` for integers.

| **Compilation flags:**
|    ``static, synchronized``

| **Template:**
|    ``random(Lower,Upper,Random)``
| **Mode and number of proofs:**
|    ``random(+integer,+integer,-integer)`` - ``zero_or_one``
|    ``random(+float,+float,-float)`` - ``zero_or_one``


------------

.. index:: randseq/4
.. _random_protocol/0::randseq/4:

``randseq/4``
^^^^^^^^^^^^^

Returns list of random values of given length in random order in interval ``[Lower, Upper[``. Fails if ``Lower > Upper`` or if the arguments are neither integers or floats. Deprecated. Use ``sequence/4`` for integers.

| **Compilation flags:**
|    ``static, synchronized``

| **Template:**
|    ``randseq(Length,Lower,Upper,List)``
| **Mode and number of proofs:**
|    ``randseq(+integer,+integer,+integer,-list(integer))`` - ``zero_or_one``
|    ``randseq(+integer,+float,+float,-list(float))`` - ``zero_or_one``


------------

.. index:: randset/4
.. _random_protocol/0::randset/4:

``randset/4``
^^^^^^^^^^^^^

Returns ordered set of random values of given size in interval ``[Lower, Upper[``. Fails if the arguments are neither integers or floats, ``Lower > Upper``, or ``Length > Upper - Lower`` when arguments are integers. Deprecated. Use ``set/4`` for integers.

| **Compilation flags:**
|    ``static, synchronized``

| **Template:**
|    ``randset(Length,Lower,Upper,Set)``
| **Mode and number of proofs:**
|    ``randset(+integer,+integer,+integer,-list(integer))`` - ``zero_or_one``
|    ``randset(+integer,+float,+float,-list(float))`` - ``zero_or_one``


------------

.. index:: maybe/0
.. _random_protocol/0::maybe/0:

``maybe/0``
^^^^^^^^^^^

Succeeds or fails with equal probability.

| **Compilation flags:**
|    ``static``

| **Mode and number of proofs:**
|    ``maybe`` - ``zero_or_one``


------------

.. index:: maybe/1
.. _random_protocol/0::maybe/1:

``maybe/1``
^^^^^^^^^^^

Succeeds with probability ``Probability`` or fails with probability ``1 - Probability``. Fails if ``Probability`` is not a float or is outside the interval ``[0.0, 1.0]``.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``maybe(Probability)``
| **Mode and number of proofs:**
|    ``maybe(+probability)`` - ``zero_or_one``


------------

.. index:: maybe/2
.. _random_protocol/0::maybe/2:

``maybe/2``
^^^^^^^^^^^

Succeeds with probability ``K/N`` where ``K`` and ``N`` are integers satisfying the equation ``0 =< K =< N``. Fails otherwise.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``maybe(K,N)``
| **Mode and number of proofs:**
|    ``maybe(+non_negative_integer,+non_negative_integer)`` - ``zero_or_one``


------------

.. index:: maybe_call/1
.. _random_protocol/0::maybe_call/1:

``maybe_call/1``
^^^^^^^^^^^^^^^^

Calls a goal or fails without calling it with equal probability. When the goal is called, it determines if this predicate succeeds once or fails.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``maybe_call(Goal)``
| **Meta-predicate template:**
|    ``maybe_call(0)``
| **Mode and number of proofs:**
|    ``maybe_call(+callable)`` - ``zero_or_one``


------------

.. index:: maybe_call/2
.. _random_protocol/0::maybe_call/2:

``maybe_call/2``
^^^^^^^^^^^^^^^^

Calls a goal or fails without calling it with probability ``Probability``. When the goal is called, it determines if this predicate succeeds once or fails.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``maybe_call(Probability,Goal)``
| **Meta-predicate template:**
|    ``maybe_call(*,0)``
| **Mode and number of proofs:**
|    ``maybe_call(+probability,+callable)`` - ``zero_or_one``


------------

.. index:: normal/3
.. _random_protocol/0::normal/3:

``normal/3``
^^^^^^^^^^^^

Returns a scaled normally (Gaussian) distributed random value with the given mean and standard deviation.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``normal(Mean,Deviation,Value)``
| **Mode and number of proofs:**
|    ``normal(+float,+non_negative_float,-float)`` - ``one``


------------

.. index:: normal/1
.. _random_protocol/0::normal/1:

``normal/1``
^^^^^^^^^^^^

Returns a normally (Gaussian) distributed random value (using a default mean of 0.0 and a default deviation of 1.0).

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``normal(Value)``
| **Mode and number of proofs:**
|    ``normal(-float)`` - ``one``


------------

.. index:: lognormal/3
.. _random_protocol/0::lognormal/3:

``lognormal/3``
^^^^^^^^^^^^^^^

Returns a scaled log normally distributed random value with the given mean and standard deviation for the normal distribution.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``lognormal(Mean,Deviation,Value)``
| **Mode and number of proofs:**
|    ``lognormal(+float,+non_negative_float,-float)`` - ``one``


------------

.. index:: lognormal/1
.. _random_protocol/0::lognormal/1:

``lognormal/1``
^^^^^^^^^^^^^^^

Returns a log normally distributed random value (using a default mean of 0.0 and a default deviation of 1.0).

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``lognormal(Value)``
| **Mode and number of proofs:**
|    ``lognormal(-float)`` - ``one``


------------

.. index:: wald/3
.. _random_protocol/0::wald/3:

``wald/3``
^^^^^^^^^^

Returns a scaled Wald (inverse Gaussian) distributed random value with the given mean.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``wald(Mean,Scale,Value)``
| **Mode and number of proofs:**
|    ``wald(+positive_float,+positive_float,-float)`` - ``one``


------------

.. index:: chi_squared/2
.. _random_protocol/0::chi_squared/2:

``chi_squared/2``
^^^^^^^^^^^^^^^^^

Returns a chi-squared distributed random value given the degrees of freedom.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``chi_squared(DegreesOfFreedom,Value)``
| **Mode and number of proofs:**
|    ``chi_squared(+positive_integer,-float)`` - ``one``


------------

.. index:: standard_t/2
.. _random_protocol/0::standard_t/2:

``standard_t/2``
^^^^^^^^^^^^^^^^

Returns a standard Student's t distributed random value given the degrees of freedom.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``standard_t(DegreesOfFreedom,Value)``
| **Mode and number of proofs:**
|    ``standard_t(+positive_integer,-float)`` - ``one``


------------

.. index:: fisher/3
.. _random_protocol/0::fisher/3:

``fisher/3``
^^^^^^^^^^^^

Returns a Fisher distributed random value given the degrees of freedom in the numerator and in the denominator.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``fisher(DegreesOfFreedomNumerator,DegreesOfFreedomDenominator,Value)``
| **Mode and number of proofs:**
|    ``fisher(+positive_integer,+positive_integer,-float)`` - ``one``


------------

.. index:: logseries/2
.. _random_protocol/0::logseries/2:

``logseries/2``
^^^^^^^^^^^^^^^

Returns a logseries distributed random value. Requires ``0.0 < Shape < 1`` and fails otherwise.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``logseries(Shape,Value)``
| **Mode and number of proofs:**
|    ``logseries(+non_negative_integer,-positive_integer)`` - ``zero_or_one``


------------

.. index:: geometric/2
.. _random_protocol/0::geometric/2:

``geometric/2``
^^^^^^^^^^^^^^^

Returns a geometric distributed random value (trials until the first success).

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``geometric(Probability,Value)``
| **Mode and number of proofs:**
|    ``geometric(+probability,-positive_integer)`` - ``one``


------------

.. index:: hypergeometric/4
.. _random_protocol/0::hypergeometric/4:

``hypergeometric/4``
^^^^^^^^^^^^^^^^^^^^

Returns a hypergeometric distributed random value.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``hypergeometric(Population,Successes,Draws,Value)``
| **Mode and number of proofs:**
|    ``hypergeometric(+non_negative_integer,+non_negative_integer,+non_negative_integer,-non_negative_integer)`` - ``one``


------------

.. index:: exponential/2
.. _random_protocol/0::exponential/2:

``exponential/2``
^^^^^^^^^^^^^^^^^

Returns an exponentially distributed random value.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``exponential(Lambda,Value)``
| **Mode and number of proofs:**
|    ``exponential(+positive_float,-float)`` - ``one``


------------

.. index:: binomial/3
.. _random_protocol/0::binomial/3:

``binomial/3``
^^^^^^^^^^^^^^

Returns a binomial distributed random value.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``binomial(Trials,Probability,Value)``
| **Mode and number of proofs:**
|    ``binomial(+positive_integer,+positive_float,-float)`` - ``one``


------------

.. index:: bernoulli/2
.. _random_protocol/0::bernoulli/2:

``bernoulli/2``
^^^^^^^^^^^^^^^

Returns a Bernoulli distributed random value.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``bernoulli(Probability,Value)``
| **Mode and number of proofs:**
|    ``bernoulli(+positive_integer,-float)`` - ``one``


------------

.. index:: beta/3
.. _random_protocol/0::beta/3:

``beta/3``
^^^^^^^^^^

Returns a beta distributed random value.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``beta(Alpha,Beta,Value)``
| **Mode and number of proofs:**
|    ``beta(+positive_float,+positive_float,-float)`` - ``one``


------------

.. index:: gamma/2
.. _random_protocol/0::gamma/2:

``gamma/2``
^^^^^^^^^^^

Returns a gamma distributed random value.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``gamma(Alpha,Value)``
| **Mode and number of proofs:**
|    ``gamma(+positive_float,-float)`` - ``one``


------------

.. index:: logistic/3
.. _random_protocol/0::logistic/3:

``logistic/3``
^^^^^^^^^^^^^^

Returns a scaled logistic distributed random value.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``logistic(Location,Scale,Value)``
| **Mode and number of proofs:**
|    ``logistic(+float,+positive_float,-float)`` - ``one``


------------

.. index:: logistic/2
.. _random_protocol/0::logistic/2:

``logistic/2``
^^^^^^^^^^^^^^

Returns a logistic distributed random value.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``logistic(Location,Value)``
| **Mode and number of proofs:**
|    ``logistic(+float,-float)`` - ``one``


------------

.. index:: logistic/1
.. _random_protocol/0::logistic/1:

``logistic/1``
^^^^^^^^^^^^^^

Returns a logistic distributed random value.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``logistic(Value)``
| **Mode and number of proofs:**
|    ``logistic(-float)`` - ``one``


------------

.. index:: poisson/2
.. _random_protocol/0::poisson/2:

``poisson/2``
^^^^^^^^^^^^^

Returns a Poisson distributed random value given the expected number of events.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``poisson(Mean,Value)``
| **Mode and number of proofs:**
|    ``poisson(+non_negative_float,-non_negative_integer)`` - ``one``


------------

.. index:: power/2
.. _random_protocol/0::power/2:

``power/2``
^^^^^^^^^^^

Returns a power distributed random value.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``power(Exponent,Value)``
| **Mode and number of proofs:**
|    ``power(+positive_float,-float)`` - ``one``


------------

.. index:: weibull/3
.. _random_protocol/0::weibull/3:

``weibull/3``
^^^^^^^^^^^^^

Returns a scaled Weibull distributed random value.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``weibull(Lambda,Shape,Value)``
| **Mode and number of proofs:**
|    ``weibull(+float,+positive_float,-float)`` - ``one``


------------

.. index:: weibull/2
.. _random_protocol/0::weibull/2:

``weibull/2``
^^^^^^^^^^^^^

Returns a Weibull distributed random value.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``weibull(Shape,Value)``
| **Mode and number of proofs:**
|    ``weibull(+positive_float,-float)`` - ``one``


------------

.. index:: uniform/3
.. _random_protocol/0::uniform/3:

``uniform/3``
^^^^^^^^^^^^^

Returns a uniform distributed random value in the interval``[Lower, Upper[``. Fails if ``Lower`` or ``Upper`` are not integers or if ``Lower > Upper``. Same as ``random/3``.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``uniform(Lower,Upper,Value)``
| **Mode and number of proofs:**
|    ``uniform(+float,+float,-float)`` - ``zero_or_one``


------------

.. index:: uniform/1
.. _random_protocol/0::uniform/1:

``uniform/1``
^^^^^^^^^^^^^

Returns a uniform distributed random value in the interval``[0.0, 1.0[``. Same as ``random/1``.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``uniform(Value)``
| **Mode and number of proofs:**
|    ``uniform(-float)`` - ``one``


------------

.. index:: triangular/4
.. _random_protocol/0::triangular/4:

``triangular/4``
^^^^^^^^^^^^^^^^

Returns a triangular distributed random value. Fails if the ``Left =< Mode =< Right`` condition does not hold.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``triangular(Left,Mode,Right,Value)``
| **Mode and number of proofs:**
|    ``triangular(+float,+float,+float,-float)`` - ``zero_or_one``


------------

.. index:: von_mises/3
.. _random_protocol/0::von_mises/3:

``von_mises/3``
^^^^^^^^^^^^^^^

Returns a von Mises distributed random value.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``von_mises(Mode,Concentration,Value)``
| **Mode and number of proofs:**
|    ``von_mises(+float,+non_negative_float,-float)`` - ``zero_or_one``


------------

.. index:: gumbel/3
.. _random_protocol/0::gumbel/3:

``gumbel/3``
^^^^^^^^^^^^

Returns a Gumbel distributed random value.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``gumbel(Location,Scale,Value)``
| **Mode and number of proofs:**
|    ``gumbel(+float,+non_negative_float,-float)`` - ``zero_or_one``


------------

.. index:: dirichlet/2
.. _random_protocol/0::dirichlet/2:

``dirichlet/2``
^^^^^^^^^^^^^^^

Returns a Dirichlet distributed list of random values.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``dirichlet(Alphas,Thetas)``
| **Mode and number of proofs:**
|    ``dirichlet(+list(positive_float),-list(positive_float))`` - ``one``


------------

.. index:: circular_uniform_polar/3
.. _random_protocol/0::circular_uniform_polar/3:

``circular_uniform_polar/3``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Returns a circular uniform distributed random point in polar coordinates given the circle radius.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``circular_uniform_polar(Radius,Rho,Theta)``
| **Mode and number of proofs:**
|    ``circular_uniform_polar(+float,+float,-float)`` - ``one``


------------

.. index:: circular_uniform_cartesian/3
.. _random_protocol/0::circular_uniform_cartesian/3:

``circular_uniform_cartesian/3``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Returns a circular uniform distributed random point in cartesian coordinates given the circle radius.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``circular_uniform_cartesian(Radius,X,Y)``
| **Mode and number of proofs:**
|    ``circular_uniform_cartesian(+float,+float,-float)`` - ``one``


------------

Protected predicates
--------------------

(none)

Private predicates
------------------

(none)

Operators
---------

(none)

.. seealso::

   :ref:`random <random/0>`, :ref:`backend_random <backend_random/0>`, :ref:`fast_random <fast_random/0>`

