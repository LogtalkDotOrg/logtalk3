.. index:: optional
.. _optional/0:

.. rst-class:: right

**object**

``optional``
============

Constructors for optional terms. An optional term is either empty or holds a value. Optional terms should be regarded as opaque terms and always used with the ``optional/1`` object by passing the optional term as a parameter.

| **Author:** Paulo Moura
| **Version:** 1.5
| **Date:** 2019/11/26

| **Compilation flags:**
|    ``static, context_switching_calls``


| **Provides:**
|    :ref:`type::type/1 <type/0::type/1>`
|    :ref:`type::check/2 <type/0::check/2>`

| **Remarks:**


   - *Type-checking support:* This object also defines a type ``optional`` for use with the ``type`` library object.

| **Inherited public predicates:**
|    (none)

.. contents::
   :local:
   :backlinks: top

Public predicates
-----------------

.. raw:: html

   <div id="empty/1"> </div>

.. index:: empty/1
.. _optional/0::empty/1:

``empty/1``
^^^^^^^^^^^

Constructs an empty optional term.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``empty(Optional)``
| **Mode and number of proofs:**
|    ``empty(--nonvar)`` - ``one``


------------

.. raw:: html

   <div id="from_goal/3"> </div>

.. index:: from_goal/3
.. _optional/0::from_goal/3:

``from_goal/3``
^^^^^^^^^^^^^^^

Constructs an optional term holding a value bound by calling the given goal. Returns an empty optional term if the goal fails or throws an error.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``from_goal(Goal,Value,Optional)``
| **Meta-predicate template:**
|    ``from_goal(0,*,*)``
| **Mode and number of proofs:**
|    ``from_goal(+callable,--term,--nonvar)`` - ``one``


------------

.. raw:: html

   <div id="of/2"> </div>

.. index:: of/2
.. _optional/0::of/2:

``of/2``
^^^^^^^^

Constructs an optional term holding the given value.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``of(Value,Optional)``
| **Mode and number of proofs:**
|    ``of(@term,--nonvar)`` - ``one``


------------

Protected predicates
--------------------

(see entity ancestors)

Private predicates
------------------

(see entity ancestors)

Operators
---------

(none)

.. seealso::

   :ref:`optional(Optional) <optional/1>`, :ref:`type <type/0>`

