.. index:: expected(Expected)
.. _expected/1:

.. rst-class:: right

**object**

``expected(Expected)``
======================

Expected term predicates. Requires passing an expected term (constructed using the ``expected`` object predicates) as a parameter.

| **Author:** Paulo Moura
| **Version:** 1.5
| **Date:** 2020-1-6

| **Compilation flags:**
|    ``static, context_switching_calls``


| **Dependencies:**
|   (none)


| **Remarks:**
|    (none)

| **Inherited public predicates:**
|    (none)

.. contents::
   :local:
   :backlinks: top

Public predicates
-----------------

.. raw:: html

   <div id="is_expected/0"> </div>

.. index:: is_expected/0
.. _expected/1::is_expected/0:

``is_expected/0``
^^^^^^^^^^^^^^^^^

True if the expected term holds a value. See also the ``if_expected/1`` predicate.

| **Compilation flags:**
|    ``static``

| **Mode and number of proofs:**
|    ``is_expected`` - ``zero_or_one``


------------

.. raw:: html

   <div id="is_unexpected/0"> </div>

.. index:: is_unexpected/0
.. _expected/1::is_unexpected/0:

``is_unexpected/0``
^^^^^^^^^^^^^^^^^^^

True if the expected term holds an error. See also the ``if_unexpected/1`` predicate.

| **Compilation flags:**
|    ``static``

| **Mode and number of proofs:**
|    ``is_unexpected`` - ``zero_or_one``


------------

.. raw:: html

   <div id="if_expected/1"> </div>

.. index:: if_expected/1
.. _expected/1::if_expected/1:

``if_expected/1``
^^^^^^^^^^^^^^^^^

Applies a closure when the expected term holds a value using the value as argument. Succeeds otherwise.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``if_expected(Closure)``
| **Meta-predicate template:**
|    ``if_expected(1)``
| **Mode and number of proofs:**
|    ``if_expected(+callable)`` - ``zero_or_more``


------------

.. raw:: html

   <div id="if_unexpected/1"> </div>

.. index:: if_unexpected/1
.. _expected/1::if_unexpected/1:

``if_unexpected/1``
^^^^^^^^^^^^^^^^^^^

Applies a closure when the expected term holds an error using the error as argument. Succeeds otherwise. Can be used to throw the exception hold by the expected term by calling it the atom ``throw``.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``if_unexpected(Closure)``
| **Meta-predicate template:**
|    ``if_unexpected(1)``
| **Mode and number of proofs:**
|    ``if_unexpected(+callable)`` - ``zero_or_more``


------------

.. raw:: html

   <div id="if_expected_or_else/2"> </div>

.. index:: if_expected_or_else/2
.. _expected/1::if_expected_or_else/2:

``if_expected_or_else/2``
^^^^^^^^^^^^^^^^^^^^^^^^^

Applies either ``ExpectedClosure`` or ``UnexpectedClosure`` depending on the expected term holding a value or an error.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``if_expected_or_else(ExpectedClosure,UnexpectedClosure)``
| **Meta-predicate template:**
|    ``if_expected_or_else(1,1)``
| **Mode and number of proofs:**
|    ``if_expected_or_else(+callable,+callable)`` - ``zero_or_more``


------------

.. raw:: html

   <div id="unexpected/1"> </div>

.. index:: unexpected/1
.. _expected/1::unexpected/1:

``unexpected/1``
^^^^^^^^^^^^^^^^

Returns the error hold by the expected term. Throws an error otherwise.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``unexpected(Error)``
| **Mode and number of proofs:**
|    ``unexpected(--term)`` - ``one_or_error``

| **Exceptions:**
|    Expected term holds a value:
|        ``existence_error(unexpected_error,Expected)``


------------

.. raw:: html

   <div id="expected/1"> </div>

.. index:: expected/1
.. _expected/1::expected/1:

``expected/1``
^^^^^^^^^^^^^^

Returns the value hold by the expected term. Throws an error otherwise.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``expected(Value)``
| **Mode and number of proofs:**
|    ``expected(--term)`` - ``one_or_error``

| **Exceptions:**
|    Expected term holds an error:
|        ``existence_error(expected_value,Expected)``


------------

.. raw:: html

   <div id="map/2"> </div>

.. index:: map/2
.. _expected/1::map/2:

``map/2``
^^^^^^^^^

When the expected term does not hold an error and mapping a closure with the expected value and the new value as additional arguments is successful, returns an expected term with the new value. Otherwise returns the same expected term.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``map(Closure,NewExpected)``
| **Meta-predicate template:**
|    ``map(2,*)``
| **Mode and number of proofs:**
|    ``map(+callable,--nonvar)`` - ``one``


------------

.. raw:: html

   <div id="flat_map/2"> </div>

.. index:: flat_map/2
.. _expected/1::flat_map/2:

``flat_map/2``
^^^^^^^^^^^^^^

When the expected term does not hold an error and mapping a closure with the expected value and the new expected term as additional arguments is successful, returns the new expected term. Otherwise returns the same expected term.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``flat_map(Closure,NewExpected)``
| **Meta-predicate template:**
|    ``flat_map(2,*)``
| **Mode and number of proofs:**
|    ``flat_map(+callable,--nonvar)`` - ``one``


------------

.. raw:: html

   <div id="either/3"> </div>

.. index:: either/3
.. _expected/1::either/3:

``either/3``
^^^^^^^^^^^^

Applies either ``ExpectedClosure`` if the expected term holds a value or ``UnexpectedClosure`` if the expected term holds an error. Returns a new expected term if the applied closure is successful. Otherwise returns the same expected term.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``either(ExpectedClosure,UnexpectedClosure,NewExpected)``
| **Meta-predicate template:**
|    ``either(2,2,*)``
| **Mode and number of proofs:**
|    ``either(+callable,+callable,--nonvar)`` - ``one``


------------

.. raw:: html

   <div id="or_else/2"> </div>

.. index:: or_else/2
.. _expected/1::or_else/2:

``or_else/2``
^^^^^^^^^^^^^

Returns the value hold by the expected term if it does not hold an error or the given default term if the expected term holds an error.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``or_else(Value,Default)``
| **Mode and number of proofs:**
|    ``or_else(--term,@term)`` - ``one``


------------

.. raw:: html

   <div id="or_else_get/2"> </div>

.. index:: or_else_get/2
.. _expected/1::or_else_get/2:

``or_else_get/2``
^^^^^^^^^^^^^^^^^

Returns the value hold by the expected term if it does not hold an error. Otherwise applies a closure to compute the expected value. Throws an error when the expected term holds an error and a value cannot be computed.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``or_else_get(Value,Closure)``
| **Meta-predicate template:**
|    ``or_else_get(*,1)``
| **Mode and number of proofs:**
|    ``or_else_get(--term,+callable)`` - ``one_or_error``

| **Exceptions:**
|    Expected term holds an unexpected error and an expected value cannot be computed:
|        ``existence_error(expected_value,Expected)``


------------

.. raw:: html

   <div id="or_else_call/2"> </div>

.. index:: or_else_call/2
.. _expected/1::or_else_call/2:

``or_else_call/2``
^^^^^^^^^^^^^^^^^^

Returns the value hold by the expected term if it does not hold an error. Calls a goal deterministically otherwise.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``or_else_call(Value,Goal)``
| **Meta-predicate template:**
|    ``or_else_call(*,0)``
| **Mode and number of proofs:**
|    ``or_else_call(--term,+callable)`` - ``zero_or_one``


------------

.. raw:: html

   <div id="or_else_throw/1"> </div>

.. index:: or_else_throw/1
.. _expected/1::or_else_throw/1:

``or_else_throw/1``
^^^^^^^^^^^^^^^^^^^

Returns the value hold by the expected term if present. Throws the error hold by the expected term as an exception otherwise.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``or_else_throw(Value)``
| **Mode and number of proofs:**
|    ``or_else_throw(--term)`` - ``one_or_error``


------------

.. raw:: html

   <div id="or_else_fail/1"> </div>

.. index:: or_else_fail/1
.. _expected/1::or_else_fail/1:

``or_else_fail/1``
^^^^^^^^^^^^^^^^^^

Returns the value hold by the expected term if it does not hold an error. Fails otherwise. Usually called to skip over expected terms holding errors.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``or_else_fail(Value)``
| **Mode and number of proofs:**
|    ``or_else_fail(--term)`` - ``zero_or_one``


------------

Protected predicates
--------------------

(none)

Private predicates
------------------

(none)

Operators
---------

(none)

.. seealso::

   :ref:`expected <expected/0>`

