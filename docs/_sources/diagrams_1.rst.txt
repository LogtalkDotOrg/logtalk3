.. index:: single: diagrams(Format)
.. _diagrams/1:

.. rst-class:: right

**object**

``diagrams(Format)``
====================

* ``Format`` - Graph language file format.


Predicates for generating all supported diagrams for libraries, directories, or files in one step using the specified format.

| **Availability:** 
|    ``logtalk_load(diagrams(loader))``

| **Author:** Paulo Moura
| **Version:** 2:8:0
| **Date:** 2019-06-13

| **Compilation flags:**
|    ``static, context_switching_calls``


| **Uses:**
|    :ref:`list <list/0>`
|    :ref:`os <os/0>`

| **Remarks:**

   - Common options: ``title/1``, ``date/1``, ``output_directory/1``, ``relation_labels/1``, ``node_type_captions/1``, ``exclude_files/1``, ``exclude_libraries/1``, ``url_prefixes/1``, ``omit_path_prefix/1``, ``entity_url_suffix_target/2``, and ``layout/1``.
   - Limitations: Some of the provided predicates only make sense for some types of diagrams. Also, fine tuning may require generating individual diagrams directly instead of as a batch using this utility object.

| **Inherited public predicates:**
|    (none)

.. contents::
   :local:
   :backlinks: top

Public predicates
-----------------

.. index:: libraries/3
.. _diagrams/1::libraries/3:

``libraries/3``
^^^^^^^^^^^^^^^

Creates all supported diagrams for a set of libraries using the specified options. The ``Project`` argument is used as a prefix for the diagram file names.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``libraries(Project,Libraries,Options)``
| **Mode and number of proofs:**
|    ``libraries(+atom,+list(atom),+list(compound))`` - ``one``


------------

.. index:: libraries/2
.. _diagrams/1::libraries/2:

``libraries/2``
^^^^^^^^^^^^^^^

Creates all supported diagrams for a set of libraries using the default options. The ``Project`` argument is used as a prefix for the diagram file names.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``libraries(Project,Libraries)``
| **Mode and number of proofs:**
|    ``libraries(+atom,+list(atom))`` - ``one``


------------

.. index:: libraries/1
.. _diagrams/1::libraries/1:

``libraries/1``
^^^^^^^^^^^^^^^

Creates  all supported diagrams for a set of libraries using the default options. The prefix ``libraries`` is used for the diagram file names.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``libraries(Libraries)``
| **Mode and number of proofs:**
|    ``libraries(+list(atom))`` - ``one``


------------

.. index:: all_libraries/1
.. _diagrams/1::all_libraries/1:

``all_libraries/1``
^^^^^^^^^^^^^^^^^^^

Creates all supported diagrams for all loaded libraries using the specified options.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``all_libraries(Options)``
| **Mode and number of proofs:**
|    ``all_libraries(+list(compound))`` - ``one``


------------

.. index:: all_libraries/0
.. _diagrams/1::all_libraries/0:

``all_libraries/0``
^^^^^^^^^^^^^^^^^^^

Creates all supported diagrams for all loaded libraries using default options.

| **Compilation flags:**
|    ``static``

| **Mode and number of proofs:**
|    ``all_libraries`` - ``one``


------------

.. index:: rlibrary/2
.. _diagrams/1::rlibrary/2:

``rlibrary/2``
^^^^^^^^^^^^^^

Creates all supported diagrams for a library and its sub-libraries using the specified options.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``rlibrary(Library,Options)``
| **Mode and number of proofs:**
|    ``rlibrary(+atom,+list(compound))`` - ``one``


------------

.. index:: rlibrary/1
.. _diagrams/1::rlibrary/1:

``rlibrary/1``
^^^^^^^^^^^^^^

Creates all supported diagrams for a library and its sub-libraries using default options.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``rlibrary(Library)``
| **Mode and number of proofs:**
|    ``rlibrary(+atom)`` - ``one``


------------

.. index:: library/2
.. _diagrams/1::library/2:

``library/2``
^^^^^^^^^^^^^

Creates all supported diagrams for a library using the specified options.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``library(Library,Options)``
| **Mode and number of proofs:**
|    ``library(+atom,+list(compound))`` - ``one``


------------

.. index:: library/1
.. _diagrams/1::library/1:

``library/1``
^^^^^^^^^^^^^

Creates all supported diagrams for a library using default options.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``library(Library)``
| **Mode and number of proofs:**
|    ``library(+atom)`` - ``one``


------------

.. index:: directories/3
.. _diagrams/1::directories/3:

``directories/3``
^^^^^^^^^^^^^^^^^

Creates all supported diagrams for a set of directories using the specified options. The ``Project`` argument is used as a prefix for the diagram file names.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``directories(Project,Directories,Options)``
| **Mode and number of proofs:**
|    ``directories(+atom,+list(atom),+list(compound))`` - ``one``


------------

.. index:: directories/2
.. _diagrams/1::directories/2:

``directories/2``
^^^^^^^^^^^^^^^^^

Creates all supported diagrams for a directory using default options. The ``Project`` argument is used as a prefix for the diagram file names.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``directories(Project,Directories)``
| **Mode and number of proofs:**
|    ``directories(+atom,+list(atom))`` - ``one``


------------

.. index:: rdirectory/3
.. _diagrams/1::rdirectory/3:

``rdirectory/3``
^^^^^^^^^^^^^^^^

Creates all supported diagrams for a directory and its sub-directories using the specified options. The ``Project`` argument is used as a prefix for the diagram file name.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``rdirectory(Project,Directory,Options)``
| **Mode and number of proofs:**
|    ``rdirectory(+atom,+atom,+list(compound))`` - ``one``


------------

.. index:: rdirectory/2
.. _diagrams/1::rdirectory/2:

``rdirectory/2``
^^^^^^^^^^^^^^^^

Creates all supported diagrams for a directory and its sub-directories using default options. The ``Project`` argument is used as a prefix for the diagram file name.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``rdirectory(Project,Directory)``
| **Mode and number of proofs:**
|    ``rdirectory(+atom,+atom)`` - ``one``


------------

.. index:: rdirectory/1
.. _diagrams/1::rdirectory/1:

``rdirectory/1``
^^^^^^^^^^^^^^^^

Creates all supported diagrams for a directory and its sub-directories using default options. The name of the directory is used as a prefix for the diagram file name.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``rdirectory(Directory)``
| **Mode and number of proofs:**
|    ``rdirectory(+atom)`` - ``one``


------------

.. index:: directory/3
.. _diagrams/1::directory/3:

``directory/3``
^^^^^^^^^^^^^^^

Creates all supported diagrams for a directory using the specified options. The ``Project`` argument is used as a prefix for the diagram file names.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``directory(Project,Directory,Options)``
| **Mode and number of proofs:**
|    ``directory(+atom,+atom,+list(compound))`` - ``one``


------------

.. index:: directory/2
.. _diagrams/1::directory/2:

``directory/2``
^^^^^^^^^^^^^^^

Creates all supported diagrams for a directory using default options. The ``Project`` argument is used as a prefix for the diagram file names.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``directory(Project,Directory)``
| **Mode and number of proofs:**
|    ``directory(+atom,+atom)`` - ``one``


------------

.. index:: directory/1
.. _diagrams/1::directory/1:

``directory/1``
^^^^^^^^^^^^^^^

Creates all supported diagrams for a directory using default options. The name of the directory is used as a prefix for the diagram file names.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``directory(Directory)``
| **Mode and number of proofs:**
|    ``directory(+atom)`` - ``one``


------------

.. index:: files/3
.. _diagrams/1::files/3:

``files/3``
^^^^^^^^^^^

Creates all supported diagrams for a set of files using the specified options. The file can be specified by name, basename, full path, or using library notation. The Project argument is used as a prefix for the diagram file names.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``files(Project,Files,Options)``
| **Mode and number of proofs:**
|    ``files(+atom,+list(atom),+list(compound))`` - ``one``


------------

.. index:: files/2
.. _diagrams/1::files/2:

``files/2``
^^^^^^^^^^^

Creates all supported diagrams for a set of files using the default options. The file can be specified by name, basename, full path, or using library notation. The Project argument is used as a prefix for the diagram file names.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``files(Project,Files)``
| **Mode and number of proofs:**
|    ``files(+atom,+list(atom))`` - ``one``


------------

.. index:: files/1
.. _diagrams/1::files/1:

``files/1``
^^^^^^^^^^^

Creates all supported diagrams for a set of files using the default options. The file can be specified by name, basename, full path, or using library notation. The prefix "files" is used for the diagram file names.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``files(Files)``
| **Mode and number of proofs:**
|    ``files(+list(atom))`` - ``one``


------------

.. index:: all_files/1
.. _diagrams/1::all_files/1:

``all_files/1``
^^^^^^^^^^^^^^^

Creates all supported diagrams for all loaded files using the specified options.

| **Compilation flags:**
|    ``static``

| **Template:**
|    ``all_files(Options)``
| **Mode and number of proofs:**
|    ``all_files(+list(compound))`` - ``one``


------------

.. index:: all_files/0
.. _diagrams/1::all_files/0:

``all_files/0``
^^^^^^^^^^^^^^^

Creates all supported diagrams for all loaded files using default options.

| **Compilation flags:**
|    ``static``

| **Mode and number of proofs:**
|    ``all_files`` - ``one``


------------

Protected predicates
--------------------

(no local declarations; see entity ancestors if any)

Private predicates
------------------

(no local declarations; see entity ancestors if any)

Operators
---------

(none)

