/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package org.logtalk.intellij;

import org.logtalk.intellij.psi.LogtalkTypes;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Logtalk.flex</tt>
 */
class LogtalkLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int SENTENCE = 2;
  public static final int PARENTHESIZED_SYMBOLS = 4;
  public static final int SINGLE_QUOTE_STRING = 6;
  public static final int DOUBLE_QUOTE_STRING = 8;
  public static final int CHAR_CODE = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 7, 2]
   * Total runtime size is 23552 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<7)|((ch>>2)&0x7f)]<<2)|(ch&0x3)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\21\1\22\3\21\1\23\1\24\1\25\1\21\14\26\1\27\50\26\1\30\2\26\1\31\1\32"+
    "\1\33\1\34\25\26\1\35\20\21\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1"+
    "\47\1\50\1\21\1\51\1\52\1\53\1\54\1\55\1\56\2\21\1\26\1\57\1\60\5\21\2\26"+
    "\1\61\7\21\1\62\1\63\20\21\1\26\1\64\1\21\1\65\40\21\1\66\5\21\1\67\11\21"+
    "\1\70\1\71\1\72\1\73\10\21\1\74\2\21\1\75\1\76\7\21\123\26\1\77\7\26\1\100"+
    "\1\101\12\62\1\102\24\21\1\26\1\103\u0582\21\1\104\u017f\21");

  /* The ZZ_CMAP_Y table has 8832 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\2\0\1\1\1\2\3\0\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\4\16\1"+
    "\17\1\20\1\21\1\22\1\23\1\24\2\23\1\25\1\26\1\0\1\27\6\0\1\30\1\31\1\32\1"+
    "\33\1\3\1\34\1\32\1\3\5\16\1\35\1\16\1\36\5\23\1\37\2\23\16\40\4\41\1\42\13"+
    "\40\1\43\1\44\1\45\1\46\1\47\1\50\1\43\1\46\1\51\1\43\1\40\1\46\1\44\1\46"+
    "\1\47\1\41\1\52\1\51\1\53\1\54\1\55\4\41\1\42\4\40\1\56\1\46\17\40\1\23\1"+
    "\50\1\45\1\41\1\36\2\40\21\23\1\57\10\23\1\60\1\53\1\61\1\62\2\53\1\63\3\3"+
    "\1\23\1\64\1\3\1\65\4\3\21\0\1\66\12\0\1\40\1\67\1\70\1\71\1\3\1\72\1\35\1"+
    "\73\1\47\3\16\1\74\2\16\10\23\1\75\1\50\1\51\6\40\1\23\1\76\1\45\1\47\14\16"+
    "\14\23\10\40\1\77\1\0\1\100\15\40\1\43\2\41\1\44\26\40\2\101\1\102\10\16\1"+
    "\35\1\103\1\3\1\104\11\23\1\3\1\105\1\106\12\0\1\107\1\110\1\107\2\3\6\53"+
    "\1\111\1\3\1\111\3\3\1\0\1\112\1\105\1\3\2\0\1\113\1\3\12\53\1\114\5\0\2\115"+
    "\1\116\1\62\1\117\30\53\1\120\1\0\1\107\1\0\1\121\1\122\1\123\2\115\1\124"+
    "\1\125\3\3\1\105\1\126\7\53\6\0\1\113\1\127\25\53\1\130\2\0\1\131\3\3\2\115"+
    "\1\124\7\53\1\114\2\0\1\63\1\132\1\3\5\53\1\130\1\133\2\0\2\134\1\31\4\3\6"+
    "\53\1\134\21\3\1\135\2\53\1\136\1\137\1\140\13\3\6\0\1\113\1\0\15\53\1\130"+
    "\1\141\4\0\1\134\1\0\2\53\1\130\1\142\2\115\1\127\1\53\1\143\1\53\1\144\1"+
    "\127\1\53\2\125\5\53\1\145\1\53\1\65\1\62\1\63\1\141\1\0\2\146\1\147\1\3\1"+
    "\105\1\3\1\150\1\130\1\142\2\115\1\130\1\3\1\105\1\3\1\106\1\127\1\111\1\151"+
    "\1\125\5\53\1\145\1\53\1\145\1\152\1\63\1\122\1\113\1\105\1\146\1\31\1\33"+
    "\1\3\1\127\1\65\1\3\1\142\2\115\1\123\1\153\2\3\1\106\1\127\1\53\2\150\5\53"+
    "\1\145\1\53\1\145\1\127\1\63\1\141\1\0\2\107\1\31\1\154\3\3\1\130\1\142\2"+
    "\115\1\33\1\3\1\155\1\3\1\106\1\127\1\53\2\125\5\53\1\145\1\53\1\145\1\127"+
    "\1\63\1\141\1\0\2\146\1\31\1\3\1\30\1\3\1\150\1\130\1\142\2\115\1\103\3\3"+
    "\1\156\1\127\1\111\1\62\1\145\1\63\1\152\1\145\1\151\1\154\1\111\1\62\2\53"+
    "\1\63\1\30\1\113\1\30\1\122\1\31\1\154\1\105\3\3\1\142\2\115\2\3\1\33\1\3"+
    "\1\106\1\127\1\53\2\145\5\53\1\145\2\53\1\143\1\63\1\120\1\0\2\122\1\31\1"+
    "\3\1\110\1\157\1\3\1\130\1\142\2\115\4\3\1\30\1\127\1\53\2\145\5\53\1\145"+
    "\2\53\1\127\1\63\1\141\1\0\2\122\1\31\1\3\1\110\1\3\1\132\1\130\1\142\2\115"+
    "\1\152\3\3\1\30\1\127\1\53\2\145\11\53\1\111\1\120\1\0\2\122\1\147\1\3\1\105"+
    "\1\3\1\160\1\130\1\142\2\115\2\3\1\62\1\53\1\30\1\127\3\53\1\111\1\62\5\53"+
    "\1\150\2\53\1\103\1\53\1\111\1\161\1\105\1\0\1\162\2\0\1\3\1\163\2\164\1\30"+
    "\3\3\1\127\13\53\1\126\1\0\1\113\1\105\1\53\1\114\1\0\1\113\2\115\1\116\11"+
    "\3\1\152\1\125\1\65\1\103\1\3\1\53\1\127\1\53\1\127\1\165\1\62\1\127\1\126"+
    "\1\0\1\107\1\131\1\53\1\65\1\0\1\31\2\115\1\116\1\53\10\3\1\154\5\3\1\31\1"+
    "\3\2\115\1\116\2\3\1\166\1\33\1\30\2\53\1\127\10\53\1\154\1\106\4\0\1\122"+
    "\1\53\1\134\2\0\1\106\10\0\1\112\1\3\1\161\16\3\12\53\1\114\4\0\1\167\2\115"+
    "\1\116\1\3\1\53\1\130\1\123\1\130\1\141\1\121\1\0\1\123\1\134\1\117\2\53\1"+
    "\130\2\0\1\133\2\115\1\170\1\31\11\16\1\74\1\3\1\171\12\53\1\111\123\53\1"+
    "\145\1\63\1\53\1\111\1\145\1\63\12\53\1\145\1\63\10\53\1\145\1\63\1\53\1\111"+
    "\1\145\1\63\3\53\1\111\16\53\1\145\1\63\20\53\1\111\1\106\10\3\4\53\4\3\25"+
    "\16\1\172\1\173\1\174\1\127\232\53\1\125\4\53\1\127\5\53\1\111\1\3\22\53\1"+
    "\111\1\30\1\175\1\137\1\140\1\3\3\53\1\145\1\130\1\112\2\3\4\53\1\130\1\112"+
    "\2\3\4\53\1\130\3\3\3\53\1\145\1\176\3\3\15\53\10\0\1\151\1\105\1\153\2\115"+
    "\1\116\7\3\1\105\1\31\2\115\1\116\1\3\26\53\2\3\12\53\1\177\1\3\21\53\1\63"+
    "\2\3\7\53\1\200\3\0\1\3\3\0\2\3\1\142\2\115\7\53\1\63\1\53\1\154\2\3\13\53"+
    "\1\3\6\53\1\63\1\3\2\115\1\116\11\3\5\53\1\114\1\0\1\3\15\53\1\134\1\0\1\113"+
    "\7\0\1\146\2\115\1\116\1\3\2\115\1\116\2\3\1\151\26\3\1\0\1\117\13\53\4\0"+
    "\1\117\1\53\1\3\2\115\1\116\3\3\1\105\2\0\3\3\1\167\7\53\1\134\2\0\1\123\2"+
    "\115\1\124\12\53\1\130\3\0\3\3\11\53\5\0\2\3\2\115\1\116\1\127\2\115\1\124"+
    "\10\53\1\63\24\3\1\113\5\0\1\117\1\126\1\130\1\201\2\3\60\23\11\0\1\113\5"+
    "\3\1\0\45\40\1\51\1\23\1\42\30\40\2\23\2\16\1\23\1\61\1\16\1\202\2\23\2\16"+
    "\2\23\2\16\1\23\1\61\1\16\1\202\2\23\2\203\2\23\2\16\3\23\1\61\2\23\2\53\2"+
    "\23\2\53\2\23\2\53\1\23\1\204\1\16\1\205\1\70\1\204\1\16\1\154\1\23\1\70\1"+
    "\16\1\3\2\23\1\16\1\206\1\70\1\204\1\16\1\154\2\3\1\105\1\0\6\3\1\207\1\113"+
    "\3\3\1\105\1\112\4\3\1\112\2\3\1\0\1\112\1\30\1\0\1\34\2\3\1\210\4\3\3\23"+
    "\1\64\6\0\1\113\5\3\3\0\1\112\1\33\1\106\2\0\1\112\3\3\1\72\1\211\1\212\1"+
    "\213\1\36\1\171\1\102\1\202\1\3\1\214\1\73\1\215\1\16\1\60\1\216\1\50\1\3"+
    "\1\217\1\61\1\32\4\3\4\220\4\221\1\222\1\223\1\112\312\3\1\224\6\225\6\226"+
    "\1\227\105\3\13\16\1\35\13\23\1\37\1\46\1\230\1\41\1\47\1\40\1\44\1\23\1\50"+
    "\31\40\1\64\1\211\1\231\1\232\3\3\11\23\1\233\1\3\1\34\16\53\1\3\1\151\3\3"+
    "\1\105\5\53\1\111\2\3\1\53\1\111\1\53\1\111\1\53\1\111\1\53\1\111\1\53\1\111"+
    "\1\53\1\111\1\53\1\111\1\53\1\111\10\0\13\3\1\151\165\3\1\234\6\3\1\106\3"+
    "\0\1\127\1\63\1\167\1\154\1\127\24\53\1\111\1\110\2\127\25\53\1\111\1\53\1"+
    "\3\1\127\11\53\1\63\1\127\26\53\1\111\4\3\6\53\1\111\15\3\361\53\1\63\22\3"+
    "\163\53\1\136\1\137\1\235\12\3\43\53\1\154\20\3\13\53\1\63\103\53\1\154\4"+
    "\53\2\115\1\124\5\3\13\40\1\236\1\3\2\0\1\237\6\40\1\101\1\240\21\53\1\130"+
    "\2\0\1\31\10\3\1\151\2\53\1\100\3\40\1\42\17\40\2\23\1\41\1\45\2\40\1\241"+
    "\1\242\1\40\1\243\2\101\2\40\1\244\1\245\1\246\1\101\17\3\1\160\1\247\1\53"+
    "\2\250\1\114\5\53\1\114\1\0\4\3\1\112\1\3\15\53\3\3\1\123\14\53\4\0\1\112"+
    "\2\3\2\115\1\116\1\3\4\0\1\123\1\53\1\151\1\155\2\115\1\124\6\53\1\130\1\0"+
    "\1\31\5\53\1\114\3\0\3\3\7\53\1\154\1\0\13\53\1\114\3\0\1\112\2\3\1\151\2"+
    "\115\1\116\1\3\1\137\1\251\2\137\2\164\1\252\1\253\12\53\1\134\2\0\1\113\2"+
    "\3\1\114\2\53\1\31\2\115\1\116\1\3\5\53\1\111\1\254\1\255\14\53\1\141\1\121"+
    "\1\117\1\130\1\177\5\3\1\151\1\63\2\53\1\114\1\0\1\62\1\256\2\3\1\127\1\111"+
    "\1\127\1\111\1\127\1\111\2\3\1\53\1\111\1\53\1\111\12\173\1\257\2\173\1\174"+
    "\2\3\24\173\10\53\1\114\1\0\1\113\1\31\2\115\1\116\1\3\151\53\3\3\5\53\1\111"+
    "\1\151\14\53\101\3\133\53\1\63\32\53\1\63\11\3\1\23\1\37\2\3\1\210\1\23\1"+
    "\3\1\260\2\53\1\145\2\53\1\111\1\53\1\65\1\150\1\145\32\53\1\63\7\3\1\151"+
    "\132\53\1\63\4\3\20\53\1\62\15\53\12\3\3\53\1\112\4\0\4\3\1\0\1\113\2\3\1"+
    "\105\1\112\5\3\1\106\6\3\1\33\1\3\1\53\1\145\41\53\1\261\1\3\1\112\2\3\2\115"+
    "\1\116\1\3\1\102\5\16\1\35\1\105\1\104\5\23\1\37\2\3\1\62\25\53\1\111\1\62"+
    "\1\53\1\62\1\53\1\62\1\53\1\62\1\154\1\31\1\110\4\3\1\106\1\3\3\53\1\127\5"+
    "\53\1\111\4\53\1\111\1\150\3\53\1\63\3\53\1\63\10\3\36\53\1\111\21\3\15\0"+
    "\1\112\41\3\1\33\40\3\7\53\1\154\14\53\1\154\13\3\7\53\1\262\4\3\4\53\1\126"+
    "\1\53\1\263\1\3\11\137\1\235\2\3\7\53\1\63\11\53\1\3\2\53\1\106\1\31\12\3"+
    "\12\16\12\23\23\53\1\63\2\115\1\116\25\3\12\137\2\3\15\137\47\3\115\137\1"+
    "\253\2\3\5\137\1\235\2\3\2\137\46\3\1\53\1\63\1\145\12\53\1\150\1\154\1\125"+
    "\5\53\1\63\2\3\5\137\1\253\2\3\7\137\1\253\20\3\4\137\1\253\1\235\2\3\5\53"+
    "\1\63\2\3\6\53\1\63\21\3\16\53\1\3\1\62\20\3\1\134\1\110\1\3\1\0\1\53\2\127"+
    "\6\53\1\3\1\113\1\105\10\3\7\53\1\154\7\137\1\140\10\3\2\137\1\264\6\137\1"+
    "\140\6\3\15\53\1\63\2\3\5\53\1\63\2\3\4\53\1\111\3\3\4\137\1\235\33\3\22\53"+
    "\1\154\15\3\14\246\1\265\3\3\14\173\1\257\103\3\1\167\15\53\3\0\1\113\7\3"+
    "\1\142\2\115\4\3\1\167\13\53\2\0\1\113\1\33\4\3\6\53\1\154\1\3\2\115\1\116"+
    "\1\3\1\167\10\53\1\114\3\0\1\266\2\115\4\3\10\137\1\253\1\267\2\3\1\167\13"+
    "\53\1\114\3\0\1\117\1\154\2\3\2\115\1\270\1\140\10\3\4\137\1\271\6\137\25"+
    "\3\1\137\1\253\1\251\1\271\3\137\1\271\2\137\1\140\1\3\13\137\1\253\4\3\2"+
    "\164\1\272\2\3\1\264\1\137\2\273\5\137\1\251\1\137\1\251\1\264\1\235\1\155"+
    "\4\3\1\140\2\3\1\264\1\235\107\3\14\137\5\3\1\271\2\3\2\164\1\272\51\3\13"+
    "\137\1\253\12\3\1\137\11\3\14\137\5\3\1\140\2\3\2\164\1\272\11\3\12\53\1\114"+
    "\3\0\2\3\2\115\1\116\15\3\6\137\1\235\5\3\2\164\1\272\131\3\10\246\10\173"+
    "\2\164\1\272\4\3\1\160\160\3\16\137\1\140\101\3\133\53\1\262\12\137\1\235"+
    "\31\3\30\0\1\113\7\3\61\137\57\3\13\53\1\111\164\3\221\137\1\253\156\3\16"+
    "\53\1\154\1\3\7\137\1\253\2\164\1\272\31\3\7\137\1\235\4\3\14\137\4\3\1\137"+
    "\3\3\2\164\1\272\1\3\1\160\5\137\1\3\1\264\4\137\134\3\21\53\1\154\2\3\1\134"+
    "\12\0\1\113\3\3\1\105\1\167\3\53\30\3\1\63\177\3\32\137\1\253\1\3\3\137\1"+
    "\140\2\137\1\140\1\3\2\137\1\235\262\3\1\106\1\31\1\106\4\0\1\113\1\106\1"+
    "\0\7\3\1\30\1\31\44\3\1\30\1\112\156\3\6\16\1\213\6\23\6\16\1\213\1\23\1\204"+
    "\4\23\6\16\1\213\6\23\1\73\1\72\1\274\1\102\1\73\1\16\1\213\1\233\1\104\1"+
    "\23\1\104\2\23\6\16\1\213\6\23\1\74\1\35\1\102\1\16\1\73\1\16\1\275\6\23\1"+
    "\74\1\35\1\16\1\214\1\276\1\16\1\275\6\23\6\16\1\213\6\23\6\16\1\213\6\23"+
    "\6\16\1\213\6\23\6\16\1\213\6\23\6\16\1\213\6\23\6\16\1\213\6\23\1\61\6\16"+
    "\1\275\5\23\1\37\1\23\1\50\5\16\1\35\6\23\1\204\1\23\6\16\1\275\5\23\1\37"+
    "\1\23\1\50\5\16\1\35\6\23\1\204\1\23\6\16\1\275\5\23\1\37\1\23\1\42\1\142"+
    "\14\115\61\137\1\140\116\3\1\53\1\127\6\53\1\152\1\125\1\127\1\53\1\111\1"+
    "\53\1\165\1\3\1\132\1\151\1\165\1\127\1\152\1\125\2\165\1\152\1\125\1\111"+
    "\1\53\1\111\1\53\1\127\1\65\2\53\1\150\4\53\1\3\2\127\1\150\4\53\235\3\6\225"+
    "\1\277\1\3\6\225\1\277\1\3\6\225\1\277\35\3\65\53\1\111\12\3\215\53\1\154"+
    "\2\3\67\53\1\63\240\137\1\235\127\3\7\53\1\63\170\3\1\33\7\3\30\0\40\3\74"+
    "\0\4\3");

  /* The ZZ_CMAP_A table has 768 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\5\34\1\60\1\20\2\17\1\21\2\34\4\0\1\22\1\7\1\33\1\56\1\57\1\45\1\56\1\15"+
    "\1\1\1\2\1\47\1\23\1\7\1\23\1\10\1\46\1\11\1\27\6\30\2\32\7\56\4\31\1\25\1"+
    "\31\10\55\1\3\1\16\1\4\1\56\1\42\1\0\1\40\1\12\2\40\1\24\1\40\10\53\1\13\1"+
    "\14\2\53\1\5\1\56\1\6\1\56\2\34\1\35\2\34\2\0\4\34\4\0\1\53\2\0\1\34\3\0\1"+
    "\53\2\0\3\55\1\0\3\55\4\53\1\0\1\55\1\53\1\55\2\53\1\55\1\53\1\55\2\53\1\55"+
    "\1\53\2\55\1\53\1\55\1\53\1\55\3\53\2\55\1\53\1\55\1\53\2\55\1\53\3\55\2\53"+
    "\3\55\3\53\1\55\2\53\5\51\1\55\1\51\1\53\1\55\1\51\1\53\1\55\1\51\1\53\1\55"+
    "\1\51\1\53\1\51\4\53\3\51\2\53\4\0\4\51\2\0\1\53\3\0\1\51\1\0\1\51\1\0\1\34"+
    "\1\41\2\34\1\51\1\0\1\55\1\53\2\0\4\53\1\0\1\54\2\0\1\55\1\0\1\55\1\0\4\55"+
    "\1\0\1\55\3\53\2\55\1\53\1\0\2\55\1\53\1\0\1\34\2\0\1\55\1\53\1\54\1\52\1"+
    "\54\1\52\1\0\3\55\1\0\1\51\3\0\3\53\3\0\1\34\1\0\5\34\1\0\1\34\1\0\2\34\1"+
    "\0\3\51\1\0\1\34\3\0\3\34\1\0\3\51\1\34\6\36\2\0\1\34\3\51\1\0\1\51\3\34\2"+
    "\51\2\34\1\0\4\34\2\51\2\36\3\51\2\0\2\51\1\34\2\51\1\0\5\51\3\34\1\51\4\0"+
    "\1\51\1\0\2\34\1\51\1\34\1\51\3\34\1\51\1\50\3\51\10\50\3\0\1\34\1\51\2\34"+
    "\2\0\2\36\1\50\3\51\1\50\3\34\1\51\1\0\2\51\1\34\2\0\3\34\1\51\1\0\2\51\1"+
    "\0\1\51\3\0\1\51\1\0\2\51\1\0\1\51\1\34\2\0\1\51\4\0\1\50\4\0\1\34\3\51\1"+
    "\50\4\0\1\50\2\0\1\34\1\0\1\34\1\0\1\34\3\0\6\26\1\0\1\51\1\0\1\51\1\0\1\34"+
    "\1\0\4\34\1\51\2\36\2\34\1\0\1\55\2\0\1\55\1\54\2\0\6\52\2\0\1\34\3\50\1\51"+
    "\1\0\2\34\1\51\1\34\1\51\1\0\1\51\2\50\1\0\1\34\2\51\1\0\2\55\3\0\1\55\1\0"+
    "\1\55\1\53\1\0\2\53\1\51\1\0\1\53\1\0\1\55\3\0\2\17\2\34\3\0\1\53\3\0\1\55"+
    "\2\0\1\53\3\55\2\53\1\55\1\0\1\55\1\0\2\55\1\0\1\53\1\51\1\53\3\0\1\55\2\53"+
    "\4\44\4\41\3\34\1\55\1\53\3\34\2\0\6\43\6\37\2\0\1\55\2\53\1\55\1\53\1\55"+
    "\1\53\3\34\1\55\3\53\1\0\1\53\1\0\2\51\1\34\2\50\2\0\1\55\1\53\1\51\3\34\1"+
    "\0\1\51\2\52\1\0\1\34\1\51\2\0\1\55\1\53\1\55\1\53\1\50\2\52\1\54\1\52\1\55"+
    "\1\53\1\55\3\54\2\0\4\54\3\53\3\51\1\34\1\51\1\50\1\0\2\50\2\26\5\50\3\0\1"+
    "\51\1\34\2\0\2\50\1\51\2\34\1\0\3\52\2\0\1\51\1\34\2\51\2\0\1\34\3\51\1\50"+
    "\2\51\1\34\2\0\3\50\3\54\1\0\1\34\1\0\2\36\2\0\1\50\1\0\2\36\1\50\1\0\2\50"+
    "\1\0\1\50\2\26\2\0\1\50\2\0\1\50\1\0\2\55\1\0\1\55\1\0\2\53\2\0\2\55\2\43"+
    "\2\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\10\1\5\1\11\1\5\1\12\1\6\1\13"+
    "\1\14\1\15\1\5\1\16\1\17\1\20\1\21\2\5"+
    "\1\22\1\23\1\22\3\24\3\22\1\24\1\25\1\1"+
    "\4\0\1\26\4\0\1\27\1\0\1\30\4\5\1\31"+
    "\1\0\1\32\3\0\1\33\1\0\1\34\1\0\1\35"+
    "\1\0\1\36\1\0\1\37\1\6\3\0\3\5\2\40"+
    "\3\0\1\32\7\0\1\5\1\15\1\5\2\0\1\32"+
    "\10\0\1\33\3\0\2\15\6\0\1\32\23\0\1\33"+
    "\12\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0126\0\u0126\0\u0126\0\u0188\0\u01b9\0\u01ea\0\u0126\0\u021b"+
    "\0\u024c\0\u027d\0\u02ae\0\u02df\0\u0126\0\u0310\0\u0341\0\u0372"+
    "\0\u0126\0\u0126\0\u0126\0\u0188\0\u03a3\0\u03d4\0\u0405\0\u0436"+
    "\0\u0467\0\u0405\0\u0126\0\u0498\0\u0126\0\u04c9\0\u04fa\0\u04c9"+
    "\0\u0126\0\u052b\0\u055c\0\u058d\0\u0157\0\u05be\0\u0126\0\u05ef"+
    "\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0126\0\u0715\0\u0746"+
    "\0\u0777\0\u07a8\0\u0126\0\u07d9\0\u0126\0\u080a\0\u083b\0\u086c"+
    "\0\u089d\0\u08ce\0\u08ff\0\u08ff\0\u0930\0\u0930\0\u0961\0\u0961"+
    "\0\u0126\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8"+
    "\0\u0126\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0b7c\0\u0bad\0\u0bde"+
    "\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\u0a56\0\u0d35"+
    "\0\u0d66\0\u0d97\0\u0d66\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c"+
    "\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u0126"+
    "\0\u0715\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u1109"+
    "\0\u113a\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291"+
    "\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419"+
    "\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u14dd\0\u150e\0\u153f\0\u1570"+
    "\0\u15a1\0\u15d2\0\u1603\0\u1634\0\u1665\0\u1696";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\7\1\11\1\7\1\12\1\7\1\13"+
    "\1\14\1\15\3\16\1\17\1\20\4\21\1\22\1\16"+
    "\1\23\3\24\1\23\1\24\1\25\1\7\1\21\1\24"+
    "\3\16\1\26\2\23\1\27\1\30\1\20\2\7\2\16"+
    "\2\23\2\20\1\21\1\7\1\10\1\31\1\11\1\32"+
    "\1\12\1\33\1\13\1\34\1\15\3\16\1\17\1\20"+
    "\4\21\1\22\1\16\1\23\3\24\1\23\1\24\1\25"+
    "\1\7\1\21\1\24\3\16\1\26\2\23\1\27\1\30"+
    "\1\20\2\7\2\16\2\23\2\20\1\21\7\7\1\13"+
    "\1\35\5\7\1\35\4\21\1\35\11\7\1\21\7\7"+
    "\1\27\1\36\1\35\6\7\2\35\1\21\15\37\1\40"+
    "\1\41\1\42\1\43\1\44\13\37\1\42\22\37\1\45"+
    "\16\46\1\47\1\50\1\43\1\44\11\46\1\51\1\46"+
    "\1\50\22\46\1\45\11\7\1\52\5\7\3\0\13\7"+
    "\1\0\23\7\70\0\1\53\1\54\5\0\1\54\4\55"+
    "\1\54\11\0\1\55\10\0\1\56\1\54\6\0\2\54"+
    "\1\55\10\0\1\13\4\57\1\0\1\13\4\0\1\13"+
    "\7\57\3\0\1\57\1\0\1\57\1\0\1\57\3\0"+
    "\2\13\6\57\2\13\11\0\1\60\1\24\1\61\1\62"+
    "\1\63\1\64\6\0\2\65\3\24\1\0\1\24\3\0"+
    "\1\24\23\0\1\66\7\0\4\16\7\0\2\16\1\0"+
    "\4\16\1\0\3\16\1\0\3\16\1\0\1\16\4\0"+
    "\1\16\1\0\1\16\1\0\1\16\1\0\1\16\11\0"+
    "\1\13\5\0\1\67\4\0\1\67\22\0\2\67\6\0"+
    "\2\67\20\0\4\21\12\0\1\21\22\0\1\21\10\0"+
    "\1\13\1\24\4\0\1\67\4\0\1\70\2\0\3\24"+
    "\1\0\1\24\3\0\1\24\7\0\2\67\6\0\2\67"+
    "\12\0\4\23\7\0\2\23\1\0\4\23\1\0\3\23"+
    "\1\0\3\23\1\0\1\23\4\0\1\23\1\0\1\23"+
    "\1\0\1\23\1\0\1\23\11\0\1\60\1\24\12\0"+
    "\2\65\3\24\1\0\1\24\3\0\1\24\33\0\4\26"+
    "\7\0\2\26\1\0\4\26\1\0\3\26\1\0\3\26"+
    "\1\0\1\26\4\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\20\27\2\0\37\27\10\0\1\13"+
    "\5\0\1\67\4\0\1\67\22\0\1\67\1\71\6\0"+
    "\2\67\11\0\1\35\5\0\1\35\4\0\1\35\22\0"+
    "\2\35\6\0\2\35\11\0\1\35\5\0\1\35\4\0"+
    "\1\35\22\0\1\35\1\72\6\0\2\35\1\0\15\37"+
    "\2\0\1\37\2\0\36\37\2\0\1\73\13\0\1\45"+
    "\60\0\1\45\63\0\1\43\40\0\16\46\1\0\1\46"+
    "\2\0\11\46\1\0\24\46\34\0\1\45\42\0\1\74"+
    "\45\0\1\75\14\0\4\53\12\0\1\53\10\0\1\76"+
    "\11\0\1\53\2\0\1\75\5\0\1\54\5\0\1\54"+
    "\4\53\1\54\11\0\1\53\10\0\1\77\1\54\6\0"+
    "\2\54\1\53\2\0\1\75\5\0\1\54\5\0\1\54"+
    "\4\53\1\54\11\0\1\53\10\0\1\77\1\100\6\0"+
    "\2\54\1\53\11\0\1\101\11\0\1\102\2\0\3\101"+
    "\1\0\1\101\3\0\1\101\33\0\1\103\11\0\1\104"+
    "\3\0\1\103\42\0\1\105\11\0\1\106\3\0\2\105"+
    "\41\0\2\107\10\0\1\110\2\107\1\0\4\107\5\0"+
    "\1\107\1\0\1\107\34\0\1\111\53\0\1\112\11\0"+
    "\1\113\2\0\3\112\1\0\1\112\3\0\1\112\40\0"+
    "\1\67\4\0\1\67\22\0\2\67\6\0\2\67\12\0"+
    "\1\114\4\0\1\67\4\0\1\67\2\0\3\114\1\0"+
    "\1\114\3\0\1\114\7\0\2\67\6\0\2\67\1\0"+
    "\16\115\1\116\4\115\1\116\22\115\1\116\1\117\6\115"+
    "\2\116\11\115\1\120\5\115\1\120\4\115\1\120\22\115"+
    "\2\120\6\115\2\120\1\115\16\121\1\122\3\0\13\121"+
    "\1\0\23\121\47\0\1\123\13\0\1\75\5\0\1\54"+
    "\5\0\1\54\4\53\1\54\11\0\1\53\10\0\1\77"+
    "\1\124\6\0\2\54\1\53\2\125\1\126\5\125\1\127"+
    "\5\125\1\127\4\130\1\127\11\125\1\130\10\125\1\131"+
    "\1\132\6\125\2\127\1\130\11\0\1\101\12\0\2\133"+
    "\3\101\1\0\1\101\3\0\1\101\33\0\1\101\14\0"+
    "\3\101\1\0\1\101\3\0\1\101\33\0\1\103\15\0"+
    "\1\103\42\0\1\105\15\0\2\105\41\0\2\107\11\0"+
    "\2\107\1\0\4\107\5\0\1\107\1\0\1\107\26\0"+
    "\1\60\1\112\14\0\3\112\1\0\1\112\3\0\1\112"+
    "\33\0\1\112\14\0\3\112\1\0\1\112\3\0\1\112"+
    "\32\0\1\60\1\114\12\0\2\134\3\114\1\0\1\114"+
    "\3\0\1\114\22\0\47\115\1\135\27\115\1\116\4\115"+
    "\1\116\22\115\1\116\1\136\6\115\2\116\17\115\1\116"+
    "\4\115\1\116\22\115\1\137\1\136\6\115\2\116\11\115"+
    "\1\120\5\115\1\120\4\115\1\120\22\115\1\120\1\140"+
    "\6\115\2\120\1\115\17\121\3\0\13\121\1\0\23\121"+
    "\47\141\1\142\13\141\1\143\5\141\1\144\5\141\1\144"+
    "\4\145\1\144\11\141\1\145\10\141\1\146\1\144\6\141"+
    "\2\144\1\145\47\125\1\147\13\125\1\126\5\125\1\127"+
    "\5\125\1\127\4\130\1\127\11\125\1\130\10\125\1\131"+
    "\1\150\6\125\2\127\1\130\2\125\1\126\14\125\4\130"+
    "\12\125\1\130\10\125\1\151\1\147\10\125\1\130\2\125"+
    "\1\126\5\125\1\127\5\125\1\127\4\130\1\127\11\125"+
    "\1\130\10\125\1\131\1\152\6\125\2\127\1\130\2\125"+
    "\1\126\5\125\1\127\5\125\1\127\4\130\1\127\11\125"+
    "\1\130\10\125\1\153\1\150\6\125\2\127\1\130\11\0"+
    "\1\154\11\0\1\155\2\0\3\154\1\0\1\154\3\0"+
    "\1\154\33\0\1\156\11\0\1\157\2\0\3\156\1\0"+
    "\1\156\3\0\1\156\22\0\46\115\1\160\1\135\27\115"+
    "\1\116\4\115\1\116\22\115\1\161\1\136\6\115\2\116"+
    "\11\115\1\120\5\115\1\120\4\115\1\120\22\115\1\35"+
    "\1\140\6\115\2\120\1\115\47\141\1\162\57\141\1\145"+
    "\1\162\13\141\1\143\5\141\1\144\5\141\1\144\4\145"+
    "\1\144\11\141\1\145\10\141\1\146\1\163\6\141\2\144"+
    "\1\145\2\141\1\143\14\141\4\145\12\141\1\145\10\141"+
    "\1\164\1\162\10\141\1\145\2\141\1\143\5\141\1\144"+
    "\5\141\1\144\4\145\1\144\11\141\1\145\10\141\1\146"+
    "\1\124\6\141\2\144\1\145\46\125\1\55\1\147\13\125"+
    "\1\126\5\125\1\127\5\125\1\127\4\130\1\127\11\125"+
    "\1\130\10\125\1\165\1\150\6\125\2\127\1\130\47\125"+
    "\1\166\11\125\2\167\1\170\5\167\1\171\5\167\1\171"+
    "\4\172\1\171\11\167\1\172\10\167\1\173\1\174\6\167"+
    "\2\171\1\172\2\125\1\126\4\125\1\130\1\127\5\125"+
    "\1\127\4\175\1\127\11\125\1\175\10\125\1\176\1\152"+
    "\6\125\2\127\1\175\11\0\1\154\12\0\2\177\3\154"+
    "\1\0\1\154\3\0\1\154\33\0\1\154\14\0\3\154"+
    "\1\0\1\154\3\0\1\154\32\0\1\60\1\156\14\0"+
    "\3\156\1\0\1\156\3\0\1\156\33\0\1\156\14\0"+
    "\3\156\1\0\1\156\3\0\1\156\22\0\46\141\1\53"+
    "\1\162\13\141\1\143\5\141\1\144\5\141\1\144\4\145"+
    "\1\144\11\141\1\145\10\141\1\77\1\163\6\141\2\144"+
    "\1\145\47\141\1\200\11\141\2\0\1\75\4\0\1\53"+
    "\1\54\5\0\1\54\4\201\1\54\11\0\1\201\10\0"+
    "\1\202\1\124\6\0\2\54\1\201\46\167\1\203\1\204"+
    "\60\167\1\205\13\167\1\170\5\167\1\171\5\167\1\171"+
    "\4\172\1\171\11\167\1\172\10\167\1\206\1\207\6\167"+
    "\2\171\1\172\2\167\1\170\14\167\4\172\12\167\1\172"+
    "\10\167\1\210\1\205\10\167\1\172\2\141\1\143\4\141"+
    "\1\145\1\144\5\141\1\144\4\211\1\144\11\141\1\211"+
    "\10\141\1\212\1\124\6\141\2\144\1\211\2\167\1\170"+
    "\5\167\1\171\5\167\1\171\4\172\1\171\11\167\1\172"+
    "\10\167\1\173\1\207\6\167\2\171\1\172\2\125\1\126"+
    "\4\125\1\130\1\127\5\125\1\127\4\175\1\127\11\125"+
    "\1\175\10\125\1\176\1\150\6\125\2\127\1\175\2\125"+
    "\1\126\5\125\1\127\5\125\1\127\4\130\1\127\11\125"+
    "\1\130\10\125\1\131\1\213\6\125\2\127\1\130\11\0"+
    "\1\214\11\0\1\215\2\0\3\214\1\0\1\214\3\0"+
    "\1\214\22\0\46\141\1\145\1\142\11\141\2\0\1\75"+
    "\4\0\1\53\1\54\5\0\1\54\4\201\1\54\11\0"+
    "\1\201\10\0\1\202\1\54\6\0\2\54\1\201\2\0"+
    "\1\75\5\0\1\54\5\0\1\54\4\53\1\54\11\0"+
    "\1\53\10\0\1\77\1\216\6\0\2\54\1\53\7\141"+
    "\1\145\1\144\5\141\1\144\4\203\1\144\11\141\1\203"+
    "\10\141\1\217\1\163\6\141\2\144\1\203\46\167\1\211"+
    "\1\205\57\167\1\201\1\205\13\167\1\170\5\167\1\171"+
    "\5\167\1\171\4\172\1\171\11\167\1\172\10\167\1\206"+
    "\1\152\6\167\2\171\1\172\2\167\1\170\5\167\1\171"+
    "\5\167\1\171\4\172\1\171\11\167\1\172\10\167\1\165"+
    "\1\207\6\167\2\171\1\172\47\167\1\220\11\167\2\141"+
    "\1\143\4\141\1\145\1\144\5\141\1\144\4\211\1\144"+
    "\11\141\1\211\10\141\1\212\1\163\6\141\2\144\1\211"+
    "\2\141\1\143\5\141\1\144\5\141\1\144\4\145\1\144"+
    "\11\141\1\145\10\141\1\146\1\216\6\141\2\144\1\145"+
    "\2\167\1\170\5\167\1\171\5\167\1\171\4\172\1\171"+
    "\11\167\1\172\10\167\1\221\1\222\6\167\2\171\1\172"+
    "\11\0\1\214\14\0\3\214\1\0\1\214\3\0\1\214"+
    "\22\0\2\167\1\170\5\167\1\171\5\167\1\171\4\172"+
    "\1\171\11\167\1\172\10\167\1\206\1\222\6\167\2\171"+
    "\1\172\2\141\1\143\5\141\1\144\5\141\1\144\4\145"+
    "\1\144\11\141\1\145\10\141\1\146\1\223\6\141\2\144"+
    "\1\145\46\167\1\211\1\204\13\167\1\170\4\167\1\172"+
    "\1\171\5\167\1\171\4\224\1\171\11\167\1\224\10\167"+
    "\1\225\1\152\6\167\2\171\1\224\2\167\1\170\5\167"+
    "\1\171\5\167\1\171\4\172\1\171\11\167\1\172\10\167"+
    "\1\221\1\207\6\167\2\171\1\172\2\167\1\170\5\167"+
    "\1\171\5\167\1\171\4\172\1\171\11\167\1\172\10\167"+
    "\1\131\1\226\6\167\2\171\1\172\2\167\1\170\4\167"+
    "\1\172\1\171\5\167\1\171\4\224\1\171\11\167\1\224"+
    "\10\167\1\225\1\207\6\167\2\171\1\224\2\167\1\170"+
    "\5\167\1\171\5\167\1\171\4\172\1\171\11\167\1\172"+
    "\10\167\1\206\1\213\6\167\2\171\1\172\2\167\1\170"+
    "\5\167\1\171\5\167\1\171\4\172\1\171\11\167\1\172"+
    "\10\167\1\153\1\207\6\167\2\171\1\172";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5831];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\1\1\3\11\3\1\1\11\5\1\1\11"+
    "\3\1\3\11\7\1\1\11\1\1\1\11\3\1\1\11"+
    "\1\1\4\0\1\11\4\0\1\1\1\0\1\11\4\1"+
    "\1\11\1\0\1\11\3\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\11\1\1\3\0\3\1"+
    "\1\11\1\1\3\0\1\1\7\0\3\1\2\0\1\1"+
    "\10\0\1\1\3\0\1\11\1\1\6\0\1\1\23\0"+
    "\1\1\12\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LogtalkLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case SINGLE_QUOTE_STRING: {
              yybegin(YYINITIAL); //out of memory errors if this line is not present
                                                        return TokenType.BAD_CHARACTER;
            }
            case 151: break;
            case DOUBLE_QUOTE_STRING: {
              yybegin(YYINITIAL); //out of memory errors if this line is not present
                                                        return TokenType.BAD_CHARACTER;
            }
            case 152: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { //System.out.println("BAD_CHARACTER: " + yytext());
                                                        return TokenType.BAD_CHARACTER;
            }
          case 33: break;
          case 2: 
            { yybegin(SENTENCE); return LogtalkTypes.LPAREN;
            }
          case 34: break;
          case 3: 
            { yybegin(SENTENCE); return LogtalkTypes.LBRACKET;
            }
          case 35: break;
          case 4: 
            { yybegin(SENTENCE); return LogtalkTypes.LBRACE;
            }
          case 36: break;
          case 5: 
            { yybegin(SENTENCE); return LogtalkTypes.SYMBOLIC_ATOM;
            }
          case 37: break;
          case 6: 
            { yybegin(SENTENCE); return LogtalkTypes.INTEGER;
            }
          case 38: break;
          case 7: 
            { yybegin(SENTENCE); return LogtalkTypes.UNQUOTED_ATOM;
            }
          case 39: break;
          case 8: 
            { yybegin(SINGLE_QUOTE_STRING);
            }
          case 40: break;
          case 9: 
            { return TokenType.WHITE_SPACE;
            }
          case 41: break;
          case 10: 
            { yybegin(SENTENCE); return LogtalkTypes.NAMED_VARIABLE;
            }
          case 42: break;
          case 11: 
            { yybegin(DOUBLE_QUOTE_STRING);
            }
          case 43: break;
          case 12: 
            { yybegin(SENTENCE); return LogtalkTypes.ANONYMOUS_VARIABLE;
            }
          case 44: break;
          case 13: 
            { return LogtalkTypes.COMMENT;
            }
          case 45: break;
          case 14: 
            { return LogtalkTypes.RPAREN;
            }
          case 46: break;
          case 15: 
            { return LogtalkTypes.RBRACKET;
            }
          case 47: break;
          case 16: 
            { return LogtalkTypes.RBRACE;
            }
          case 48: break;
          case 17: 
            { yybegin(YYINITIAL); return LogtalkTypes.DOT;
            }
          case 49: break;
          case 18: 
            { 
            }
          case 50: break;
          case 19: 
            { yybegin(SENTENCE);
                                                        return LogtalkTypes.QUOTED_ATOM;
            }
          case 51: break;
          case 20: 
            { yybegin(YYINITIAL);
                                                        return TokenType.BAD_CHARACTER;
            }
          case 52: break;
          case 21: 
            { yybegin(SENTENCE);
                                                        return LogtalkTypes.STRING;
            }
          case 53: break;
          case 22: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(SENTENCE); return LogtalkTypes.MAP_OP;
            }
          case 54: break;
          case 23: 
            { yybegin(CHAR_CODE); yypushback(2);
            }
          case 55: break;
          case 24: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { yybegin(SENTENCE); return LogtalkTypes.UNQUOTED_COMPOUND_NAME;
            }
          case 56: break;
          case 25: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(SENTENCE);
                                                        return LogtalkTypes.QUOTED_COMPOUND_NAME;
            }
          case 57: break;
          case 26: 
            { yybegin(PARENTHESIZED_SYMBOLS); yypushback(yylength() - 1); return LogtalkTypes.LPAREN;
            }
          case 58: break;
          case 27: 
            { yybegin(SENTENCE); return LogtalkTypes.FLOAT;
            }
          case 59: break;
          case 28: 
            { yybegin(SENTENCE); return LogtalkTypes.BIN_NUMBER;
            }
          case 60: break;
          case 29: 
            { yybegin(SENTENCE); return LogtalkTypes.OCT_NUMBER;
            }
          case 61: break;
          case 30: 
            { yybegin(SENTENCE); return LogtalkTypes.HEX_NUMBER;
            }
          case 62: break;
          case 31: 
            { yybegin(CHAR_CODE); yypushback(3);
            }
          case 63: break;
          case 32: 
            { yybegin(SENTENCE); return LogtalkTypes.CHAR_CODE;
            }
          case 64: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
